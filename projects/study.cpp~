
#include <iostream>
#include <stack>
#include <string>
#include <map>

class LinkedList {
public:
    char data;
    LinkedList* next;

    LinkedList(char data) {
        this->data = data;
        this->next = nullptr;
    }
};

class LinkedListStack {
public:
    LinkedList* top;

    LinkedListStack() {
        top = nullptr;
    }

    void push(char data) {
        LinkedList* new_node = new LinkedList(data);
        if (!top) {
            top = new_node;
        } else {
            new_node->next = top;
            top = new_node;
        }
    }

    char pop() {
        if (!top) {
            return '\0'; // Không có dữ liệu
        }
        char data = top->data;
        LinkedList* temp = top;
        top = top->next;
        delete temp;
        return data;
    }

    char peek() {
        if (!top) {
            return '\0'; // Không có dữ liệu
        }
        return top->data;
    }

    bool isEmpty() {
        return top == nullptr;
    }
};

bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

int precedence(char c) {
    if (c == '+' || c == '-') {
        return 1;
    } else if (c == '*' || c == '/') {
        return 2;
    }
    return 0;
}

std::string infixToPostfix(const std::string& infix) {
    std::string postfix = "";
    LinkedListStack stack;

    for (char c : infix) {
        if (isalnum(c)) {
            postfix += c;
        } else if (c == '(') {
            stack.push(c);
        } else if (c == ')') {
            while (!stack.isEmpty() && stack.peek() != '(') {
                postfix += stack.pop();
            }
            stack.pop(); // Xóa '(' khỏi ngăn xếp
        } else {
            while (!stack.isEmpty() && precedence(c) <= precedence(stack.peek())) {
                postfix += stack.pop();
            }
            stack.push(c);
        }
    }

    while (!stack.isEmpty()) {
        postfix += stack.pop();
    }

    return postfix;
}

int main() {
    std::string infixExpression;
    std::cout << "Nhập biểu thức infix: ";
    std::cin >> infixExpression;

    std::string postfixExpression = infixToPostfix(infixExpression);
    std::cout << "Biểu thức postfix tương ứng: " << postfixExpression << std::endl;

    return 0;
}
